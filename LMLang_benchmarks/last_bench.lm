// Функция для построения дерева в массиве
func int[] bottomUpTree(int[] nodes, int index, int item, int depth) {
    nodes[index] = item;
    if (depth > 0) {
        nodes = bottomUpTree(nodes, 2 * index + 1, 2 * item - 1, depth - 1);
        nodes = bottomUpTree(nodes, 2 * index + 2, 2 * item, depth - 1);
    }
    return nodes;
}

// Функция для вычисления itemCheck
func int itemCheck(int[] nodes, int index, int depth) {
    if ((2 * index + 1) >= MAX_NODES) {
        return nodes[index];
    }
    return nodes[index] + itemCheck(nodes, 2 * index + 1, depth - 1) - itemCheck(nodes, 2 * index + 2, depth - 1);
}

func int main() {
    int MAX_NODES = 300; // Достаточно большое значение для массива
    int[] posTree = int[MAX_NODES];
    int[] negTree = int[MAX_NODES];
    int ret = 0;
    for (int n = 4; n <= 7; n=n+1) {
        int minDepth = 4;
        int maxDepth = 0;
        if (minDepth + 2 > n) {
            maxDepth = minDepth + 2;
        } else {
            maxDepth = n;
        }
        int stretchDepth = maxDepth + 1;

        int[] stretchTree = int[MAX_NODES];
        for (int i = 0; i < MAX_NODES; i=i+1) {
            stretchTree[i] = 0;
        }
        stretchTree = bottomUpTree(stretchTree, 0, 0, stretchDepth);
        int check = itemCheck(stretchTree, 0, stretchDepth);

        int[] longLivedTree = int[MAX_NODES];
        for (int i = 0; i < MAX_NODES; i=i+1){
            longLivedTree[i] = 0;
        }
        longLivedTree = bottomUpTree(longLivedTree, 0, 0, maxDepth);

        for (int depth = minDepth; depth <= maxDepth; depth = depth + 2) {
            int iterations = 1;
            for (int i = 0; i < ((maxDepth - depth) + minDepth); i=i+1) {
                iterations = iterations * 2;
            }
            check = 0;
            for (int i = 1; i <= iterations; i=i+1) {
                for (int j = 0; j < MAX_NODES; j=j+1) {
                    posTree[j] = 0;
                    negTree[j] = 0;
                }


                posTree = bottomUpTree(posTree, 0, i, depth);
                negTree = bottomUpTree(negTree, 0, 0-i, depth);
                check = check + itemCheck(posTree, 0, depth) + itemCheck(negTree, 0, depth);
            }
        }

        ret = ret + itemCheck(longLivedTree, 0, maxDepth);
    }

    int expected = -4;
    if (ret != expected) {
        print(ret);
        return 1;
    } else {
        print(3333);
    }
    return 0;
}